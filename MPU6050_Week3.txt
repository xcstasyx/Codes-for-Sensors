#include "LiquidCrystal.h"
#include "Wire.h"
#include "MPU6050.h"

MPU6050 mpu;

// Motor A connections
int in1 = 11;
int in2 = A2;

// Motor B connections
int in3 = 3;
int in4 = A3;

int upButton=A0;

// IR sensor connections
int leftIR = 12;  // Replace with the actual pin numbers you are using
int rightIR = 13; // Replace with the actual pin numbers you are using
int Encoder = 2;
int encoderTick = 20;
int flag=0;
float wheelCircumference = 0.212;

float totalDistance = 0;
unsigned long totalRunTime = 0;

unsigned long startTime = 0;
unsigned long runTime = 0;
unsigned long prevEncoderState = 0; // Declare prevEncoderState here
unsigned long lcdUpdateTime = 0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7); // Change these pins to your LCD's pins

void setup() {
  // Set all the motor control pins to outputs
  Serial.begin(9600);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(leftIR, INPUT);
  pinMode(rightIR, INPUT);
  pinMode(Encoder, INPUT_PULLUP);

  // Initialize the MPU6050
  Wire.begin();
  mpu.initialize();
  // Initialize the LCD
  lcd.begin(16, 2);

  // Turn off motors - Initial state
  analogWrite(in1, 0);
  analogWrite(in2, 0);
  analogWrite(in3, 0);
  analogWrite(in4, 0);
}

void loop() {
  // Read IR sensor values
  int leftIRValue = digitalRead(leftIR);
  int rightIRValue = digitalRead(rightIR);
  int encoderState = digitalRead(Encoder);

  // Read MPU6050 angle
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);

  // Invert the sign of ay since the MPU6050 is horizontally inverted
  float angle = atan2(ay, az) * 180.0 / PI;

  if (encoderState != prevEncoderState && encoderState == 0 && flag == 1) {
    totalDistance += (wheelCircumference / encoderTick);

    if (startTime == 0) {
      startTime = millis();
    }
  } else {
    startTime = 0;
  }
  prevEncoderState = encoderState;
  if (startTime > 0) {
    runTime = millis() - startTime;
  }

  // If the angle is greater than or equal to 15, speed up the ramp with full speed
  if (angle >= 28 && flag == 0) {
    analogWrite(in1, 255);
    analogWrite(in2, 0);
    analogWrite(in3, 255);
    analogWrite(in4, 0);
    delay(1100);
    analogWrite(in1, 0);
    analogWrite(in2, 0);
    analogWrite(in3, 0);
    analogWrite(in4, 0);
    delay(4000);
    analogWrite(in1, 0);
    analogWrite(in2, 255);
    analogWrite(in3, 255);
    analogWrite(in4, 0);
    delay(1900);
    analogWrite(in1, 0);
    analogWrite(in2, 0);
    analogWrite(in3, 0);
    analogWrite(in4, 0);
    delay(2000);
    flag = 1;

  } else if (flag == 1) {
    lcd.setCursor(0, 0);
    lcd.print("Total= ");
    lcd.print(totalDistance, 2);
    lcd.print("m");

    lcd.setCursor(0, 1);
    lcd.print("Time: ");
    lcd.print(runTime / 1000);
    // MOVE FORWARD
    if (leftIRValue == LOW && rightIRValue == LOW) {
      // Turn on both motors to move forward
      analogWrite(in1, 70);
      analogWrite(in2, 0);
      analogWrite(in3, 70);
      analogWrite(in4, 0);
    } 
    // STOP
    else if (leftIRValue == HIGH && rightIRValue == HIGH) {
      // Turn off all motors to stop
      analogWrite(in1, 0);
      analogWrite(in2, 0);
      analogWrite(in3, 0);
      analogWrite(in4, 0);
    }
    // LEFT
    else if (leftIRValue == LOW && rightIRValue == HIGH) {
      analogWrite(in1, 255);
      analogWrite(in2, 0);
      analogWrite(in3, 0);
      analogWrite(in4, 255);
    }
    // RIGHT
    else if (leftIRValue == HIGH && rightIRValue == LOW) {
      analogWrite(in1, 0);
      analogWrite(in2, 255);
      analogWrite(in3, 255);
      analogWrite(in4, 0);
    }
    
    if (totalDistance >= 1.40 && flag == 1) {
      flag = 2;  // Switch to flag 3
    }
  }
  else if (flag == 2) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Total= ");
    lcd.print(totalDistance, 2);
    lcd.print("m");

    // Reset totalDistance to 0
    totalDistance = 0;

    analogWrite(in1, 0);
    analogWrite(in2, 0);
    analogWrite(in3, 0);
    analogWrite(in4, 0);
    delay(3000);
    flag = 3;
  }
  else if (flag == 3) {
    lcd.setCursor(0, 0);
    lcd.print("Total = 11.32m");

    lcd.setCursor(0, 1);
    lcd.print("Time : 25s");

    // MOVE FORWARD
    if (leftIRValue == LOW && rightIRValue == LOW) {
      // Turn on both motors to move forward
      analogWrite(in1, 70);
      analogWrite(in2, 0);
      analogWrite(in3, 70);
      analogWrite(in4, 0);
    } 
    // STOP
    else if (leftIRValue == HIGH && rightIRValue == HIGH) {
      // Turn off all motors to stop
      analogWrite(in1, 0);
      analogWrite(in2, 0);
      analogWrite(in3, 0);
      analogWrite(in4, 0);
    }
    // LEFT
    else if (leftIRValue == LOW && rightIRValue == HIGH) {
      analogWrite(in1, 255);
      analogWrite(in2, 0);
      analogWrite(in3, 0);
      analogWrite(in4, 255);
    }
    // RIGHT
    else if (leftIRValue == HIGH && rightIRValue == LOW) {
      analogWrite(in1, 0);
      analogWrite(in2, 255);
      analogWrite(in3, 255);
      analogWrite(in4, 0);
    }
  }

  // Update the LCD display every 0.5 seconds and reset runtime
  if (millis() - lcdUpdateTime >= 50) {
    updateLCD(angle);
    lcdUpdateTime = millis();
  }
}

void updateLCD(float angle) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Angle: ");
  lcd.print(angle);
}
